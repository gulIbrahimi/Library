Vision Statement:
The ultimate goal of the Library Management System project is to develop a comprehensive, user-friendly platform that revolutionizes the management of library resources, enhances library operations, and significantly improves the user experience for both library staff and patrons. This system aims to integrate advanced features such as robust user management, extensive search capabilities, and seamless resource tracking while ensuring data integrity and security.

To stand out, our Library Management System will offer unique functionalities that elevate it beyond traditional library management software. These include personalized recommendations powered by machine learning, community engagement tools like book clubs and discussion forums, mobile access for on-the-go resource management, virtual reality (VR) tours of the library, interactive learning modules, advanced analytics for informed decision-making, and comprehensive accessibility features for inclusive user experiences.

How It Helps People?

1. For Librarians and Library Staff:
    Efficient Resource Management: Simplifies the process of adding, updating, and removing library resources, tracking their         
    availability and status.
    User Tracking: Manages user accounts and tracks borrowed items, reducing administrative burden and minimizing errors.
    Automated Notifications: Sends automated reminders for due dates, overdue items, and reserved resource availability.

2. For Library Patrons:
    Easy Resource Discovery: Allows quick search and location of resources with advanced search and filter functionalities.
    Seamless Borrowing Process: Streamlines the checkout and check-in processes, making it easier to borrow and return items.
    Personalized Recommendations: Recommends books, CDs, and other materials based on users' borrowing history and preferences.
    Community Engagement: Offers book clubs, discussion forums, and event calendars to foster a sense of community.
    Mobile Access: Provides a mobile app for easy access to library resources and account management.
    Virtual Reality Tours: Offers immersive virtual tours of the library to explore resources.
    Interactive Learning Modules: Provides interactive tutorials to maximize the use of digital resources.
    Account Management: Allows users to view their borrowing history, track due dates, and renew items online.

3. For the Community:
    Access to Knowledge: Promotes literacy and learning within the community by improving efficiency and accessibility of library           resources.
    Inclusion of Digital Resources: Ensures access to a broad range of materials, including e-books and online databases.
    Community Engagement: Fosters community through book clubs, discussion forums, and library events.
    Long-term Benefits
    Scalability and Adaptability: Designed to grow with the library’s needs, adaptable to various types of libraries.
    Enhanced User Experience: Provides an intuitive and satisfying experience for both staff and patrons, encouraging frequent use of       library services.
    Data-Driven Insights: Future enhancements include analytics and reporting features that provide insights into resource usage            patterns.
    
"Virtual Library"
This project consists of four Java classes: Library, Resource, Book, and CD. The Library class is a generic class 
that represents a library with a maximum number of resources. The Resource class is the parent class for Book 
and CD classes and represents a resource with a title, publisher, year, electronic status, and number of copies. 
The Book and CD classes are child classes of Resource and represent books and CDs, respectively, with additional attributes.

Features:
- Add new books and CDs to the library.
- Check out and check in resources.
- Display information about available and borrowed resources.
- Simple graphical user interface (GUI) using Java Swing.

Project Structure:
LibraryProject
├── src
│ ├── Book.java
│ ├── CD.java
│ ├── LibraryInterface.java
│ ├── Resource.java
│ └── LibraryGUI.java
└── .gitignore

Usage:
1. Enter the details of the resource you want to add (title, publisher, year, author, pages, copies).
2. Click the "Add Book" button to add the book to the library.
3. The details of the added book will be displayed in the text area.
4. You can extend this functionality to add CDs and other resources.


Project Structure in Detail:
1. Parent Class: Resource
    The Resource class represents a resource with a title, publisher, year, electronic status, and number of copies. 
    Borrowers can check out and return resources. 

    The Resource class has the following instance variables:
        title: the title of the resource
        publisher: the publisher of the resource
        year: the year of the resource
        electronic: the electronic status of the resource
        numCopies: the number of copies of the resource
        borrowers: a list of borrowers who have checked out the resource

    The Resource class has the following methods:
        getTitle(): returns the title of the resource
        getPublisher(): returns the publisher of the resource
        getYear(): returns the year of the resource
        isElectronic(): returns the electronic status of the resource
        isAvailable(): returns whether the resource is available for checkout
        getBorrowers(): returns the borrowers of the resource as an array
        toString(): returns a formatted string representing the resource
        checkOut(): checks out the resource to a borrower
        checkIn(): checks in the resource from a borrower
        isBorrowedBy(): checks if the resource is borrowed by a specific user

2. Child Classes: Book and CD
    The Book and CD classes are child classes of Resource and represent books and CDs, respectively, with additional attributes.

    The Book class represents a book with a title, publisher, year, electronic status, number of copies, author, and number of pages. 
   
    The Book class has the following instance variables:
        author: the author of the book
        numPages: the number of pages in the book

- The CD class represents a CD with a title, publisher, year, electronic status, number of copies, and runtime. 

    The CD class has the following instance variables:
        artist: the artist of the CD
        length: the length of the CD 

3. Library Class
    The Library class is a generic class that represents a library with a maximum num of resources. 
    
    The Library class has the following instance variables:
        maxResources: the maximum number of resources that can be stored in the library
        resources: an ArrayList of resources    
        
    The Library class has the following methods:
        getAllResources(): returns all resources in the library as an array
        getUnavailable(): returns all the unavailable resources in library as an array
        getAllUserHasCheckedOut(): returns all the resources checked out by a specific user in the library as an array
        getAllBooks(): returns all the books in the library as an array
        getAllCDs(): returns all the CDs in the library as array


Contributions:
Gul Ibrahimi and the Team


